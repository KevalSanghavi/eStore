package com.estore.dao.impl;

import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.estore.dao.OrderDao;
import com.estore.model.BillingAddress;
import com.estore.model.CartItem;
import com.estore.model.Customer;
import com.estore.model.CustomerOrder;
import com.estore.model.Order;
import com.estore.model.ShippingAddress;

@Repository
@Transactional
public class OrderDaoImpl implements OrderDao {

	public void populateAndSaveOrder(CustomerOrder customerOrder) {
		// Populate Order.
		Order order = new Order();
		order.setCustomer(customerOrder.getCustomer());
		order.setBillingAddress(customerOrder.getBillingAddress());
		order.setShippingAddress(customerOrder.getShippingAddress());
		this.setOrderDate(order);
		this.setOrderedItems(customerOrder, order);
		
		// Save Order.
		
	}
	
	private void setOrderDate(Order order) {
		Date date = new Date();
		order.setOrderDate(date);
	}
	
	private void setOrderedItems(CustomerOrder customerOrder, Order order) {
		Map<Integer, Integer> orderedItems = new HashMap<Integer, Integer>();
		List<CartItem> cartItems = customerOrder.getCart().getCartItems();
		for (CartItem cartItem : cartItems) {
			orderedItems.put(cartItem.getProduct().getProductId(), cartItem.getQuantity());
		}
		order.setOrderedItems(orderedItems);
	}
	
}

/*

@Id
@GeneratedValue
private int orderId;

@OneToOne
@JoinColumn(name = "customerId")
private Customer customer;

@OneToOne
@JoinColumn(name = "billingAddressId")
private BillingAddress billingAddress;

@OneToOne
@JoinColumn(name = "shippingAddressId")
private ShippingAddress shippingAddress;

@Temporal(TemporalType.DATE)
private Date orderDate;

@Temporal(TemporalType.DATE)
private Date fulfillmentDate;

@JoinTable(name = "ordereditems")
@javax.persistence.OneToMany(cascade = CascadeType.ALL)
@javax.persistence.MapKey(name = "productid")
private Map<Integer, Integer> orderedItems = new HashMap<Integer, Integer>();

private double grandTotal;

*/
